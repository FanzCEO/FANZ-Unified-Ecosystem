# üõ°Ô∏è FANZ HARDENED KUBERNETES DEPLOYMENT
# Security-hardened deployment manifest with strict security controls
apiVersion: v1
kind: Namespace
metadata:
  name: fanz-production
  labels:
    app.kubernetes.io/name: fanz-ecosystem
    app.kubernetes.io/instance: production
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fanz-backend-hardened
  namespace: fanz-production
  labels:
    app: fanz-backend
    version: hardened
    tier: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: fanz-backend
  template:
    metadata:
      labels:
        app: fanz-backend
        version: hardened
        tier: backend
      annotations:
        # Security scanning annotations
        security.fanz.network/scanned: "true"
        security.fanz.network/scan-date: "2024-09-15"
        # Prometheus monitoring
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      # Service account with minimal permissions
      serviceAccountName: fanz-backend-sa
      automountServiceAccountToken: false
      
      # Security context for the pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        seccompProfile:
          type: RuntimeDefault
      
      # Init container for setup (if needed)
      initContainers:
      - name: setup
        image: gcr.io/distroless/base-debian12:nonroot
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
          runAsGroup: 65532
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        command: ["/bin/sh", "-c", "echo 'Setup completed'"]
        resources:
          limits:
            memory: "64Mi"
            cpu: "50m"
          requests:
            memory: "32Mi"
            cpu: "25m"
      
      # Application container
      containers:
      - name: fanz-backend
        image: fanz-backend:hardened@sha256:latest  # Replace with actual digest
        imagePullPolicy: Always
        
        # Security context for container
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
          runAsGroup: 65532
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        
        # Environment variables from secrets and configmaps
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: fanz-database-secret
              key: database-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: fanz-jwt-secret
              key: jwt-secret
        
        # Resource limits and requests
        resources:
          limits:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          requests:
            memory: "512Mi"
            cpu: "250m"
            ephemeral-storage: "512Mi"
        
        # Ports
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 3001
          protocol: TCP
        
        # Volume mounts (read-only where possible)
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-log
          mountPath: /var/log
        - name: app-cache
          mountPath: /app/.cache
        - name: config
          mountPath: /app/config
          readOnly: true
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
            httpHeaders:
            - name: X-Health-Check
              value: "liveness"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /api/ready
            port: http
            httpHeaders:
            - name: X-Health-Check
              value: "readiness"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
          successThreshold: 1
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: "100Mi"
      - name: var-log
        emptyDir:
          sizeLimit: "500Mi"
      - name: app-cache
        emptyDir:
          sizeLimit: "200Mi"
      - name: config
        configMap:
          name: fanz-config
          defaultMode: 0444  # read-only
      
      # Node selection and affinity
      nodeSelector:
        kubernetes.io/arch: amd64
        node.kubernetes.io/instance-type: "standard"
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - fanz-backend
              topologyKey: kubernetes.io/hostname
      
      # Tolerations (if needed)
      tolerations:
      - key: "fanz.network/dedicated"
        operator: "Equal"
        value: "backend"
        effect: "NoSchedule"
      
      # DNS policy
      dnsPolicy: ClusterFirst
      
      # Restart policy
      restartPolicy: Always
      
      # Priority class
      priorityClassName: fanz-backend-priority
      
      # Termination grace period
      terminationGracePeriodSeconds: 30

---
# Service Account with minimal permissions
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fanz-backend-sa
  namespace: fanz-production
automountServiceAccountToken: false

---
# Priority class for backend services
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: fanz-backend-priority
value: 1000
globalDefault: false
description: "Priority class for FANZ backend services"

---
# Service for backend
apiVersion: v1
kind: Service
metadata:
  name: fanz-backend-service
  namespace: fanz-production
  labels:
    app: fanz-backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 3001
    targetPort: metrics
    protocol: TCP
  selector:
    app: fanz-backend

---
# Network Policy for backend
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fanz-backend-netpol
  namespace: fanz-production
spec:
  podSelector:
    matchLabels:
      app: fanz-backend
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: fanz-ingress
    - podSelector:
        matchLabels:
          app: fanz-gateway
    ports:
    - protocol: TCP
      port: 3000
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3001  # metrics
  
  egress:
  # DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # HTTPS outbound
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Database
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  # Redis
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fanz-backend-pdb
  namespace: fanz-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: fanz-backend

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fanz-backend-hpa
  namespace: fanz-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fanz-backend-hardened
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60