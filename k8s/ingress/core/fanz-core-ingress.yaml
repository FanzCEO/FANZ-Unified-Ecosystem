---
# FanzLanding Main Portal Ingress - fanzunlimited.com
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fanzlanding-main-ingress
  namespace: fanz-core
  labels:
    app: fanzlanding
    component: portal
    tier: public
    system: fanz
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "128m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://fanzunlimited.com,https://www.fanzunlimited.com"
    
    # Landing page headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.fanz.media; style-src 'self' 'unsafe-inline' https://cdn.fanz.media; img-src 'self' data: https: blob:; connect-src 'self' https: wss:;" always;
      
      # Rate limiting
      limit_req_zone $binary_remote_addr zone=fanzlanding_ratelimit:10m rate=200r/m;
      limit_req zone=fanzlanding_ratelimit burst=50 nodelay;
spec:
  rules:
  - host: fanzunlimited.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fanzlanding-web
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: fanzlanding-api
            port:
              number: 8080
  - host: www.fanzunlimited.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fanzlanding-web
            port:
              number: 80

---
# FANZ API Gateway Public Ingress - api.fanzunlimited.com
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fanz-api-gateway-ingress
  namespace: apigw
  labels:
    app: api-gateway
    component: kong
    tier: public
    system: fanz
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "512m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-FANZ-Auth,X-API-Key"
    
    # API Gateway specific headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-Frame-Options "DENY" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header X-API-Gateway "FANZ-Kong" always;
      
      # API rate limiting
      limit_req_zone $binary_remote_addr zone=api_ratelimit:10m rate=500r/m;
      limit_req zone=api_ratelimit burst=100 nodelay;
      
      # API key rate limiting (more generous)
      limit_req_zone $http_x_api_key zone=api_key_ratelimit:10m rate=2000r/m;
      limit_req zone=api_key_ratelimit burst=500 nodelay;
spec:
  rules:
  - host: api.fanzunlimited.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fanz-api-gateway-public
            port:
              number: 443

---
# FanzDash Admin Interface Ingress - dash.fanzunlimited.com (Private - VPN/IP restricted)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fanzdash-admin-ingress
  namespace: fanzdash
  labels:
    app: fanzdash
    component: dashboard
    tier: admin
    system: fanz
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "1024m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    
    # Admin access restrictions
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    
    # Enhanced security headers for admin interface
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-Frame-Options "DENY" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' wss:;" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header X-Admin-Interface "FANZ-Dashboard" always;
      
      # Strict rate limiting for admin
      limit_req_zone $binary_remote_addr zone=admin_ratelimit:10m rate=60r/m;
      limit_req zone=admin_ratelimit burst=20 nodelay;
      
      # Log all admin access
      access_log /var/log/nginx/fanzdash_access.log combined;
spec:
  rules:
  - host: dash.fanzunlimited.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fanzdash-private
            port:
              number: 8080
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: fanzdash-api
            port:
              number: 8081
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: fanzdash-private
            port:
              number: 8081

---
# Media Hub Origin Ingress - media.fanz.media (CDN Origin - Private)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: media-hub-origin-ingress
  namespace: media
  labels:
    app: media-hub
    component: origin
    tier: private
    system: fanz
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"  # No limit for media files
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "1200"  # 20 minutes for large files
    nginx.ingress.kubernetes.io/proxy-read-timeout: "1200"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    
    # Restrict to CDN IPs only (Cloudflare, Bunny.net)
    nginx.ingress.kubernetes.io/whitelist-source-range: "173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22,10.0.0.0/8"
    
    # Media-specific headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header X-Media-Origin "FANZ-Hub" always;
      add_header Cache-Control "public, max-age=86400" always;
      
      # Media rate limiting (generous for CDN)
      limit_req_zone $binary_remote_addr zone=media_ratelimit:10m rate=1000r/m;
      limit_req zone=media_ratelimit burst=200 nodelay;
      
      # Enable caching for media
      location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|mp4|mp3|webm|mov|avi)$ {
        expires 7d;
        add_header Cache-Control "public, immutable";
      }
spec:
  rules:
  - host: media.fanz.media
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fanz-hls-origin
            port:
              number: 80
      - path: /storage
        pathType: Prefix
        backend:
          service:
            name: fanz-media-storage
            port:
              number: 8080

---
# FanzHubVault Ingress - vault.fanz.foundation (Private - VPN only)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fanzhubvault-ingress
  namespace: vault
  labels:
    app: fanzhubvault
    component: vault
    tier: private
    system: fanz
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "128m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    
    # Strict IP restrictions for vault access
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8"
    
    # Maximum security headers for sensitive data
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-Frame-Options "DENY" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
      add_header Content-Security-Policy "default-src 'none'; script-src 'self'; style-src 'self'; connect-src 'self';" always;
      add_header Referrer-Policy "no-referrer" always;
      add_header X-Vault-Access "FANZ-Compliance" always;
      
      # Very strict rate limiting for vault
      limit_req_zone $binary_remote_addr zone=vault_ratelimit:10m rate=30r/m;
      limit_req zone=vault_ratelimit burst=10 nodelay;
      
      # Log all vault access
      access_log /var/log/nginx/vault_access.log combined;
spec:
  rules:
  - host: vault.fanz.foundation
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fanz-vault-private
            port:
              number: 8200

---
# FANZ Ad Service Ingress - ads.fanz.fans
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fanz-ads-ingress
  namespace: ads
  labels:
    app: fanz-ads
    component: service
    tier: public
    system: fanz
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "64m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET,POST,PUT,DELETE,OPTIONS"
    
    # Ad service headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header X-Ads-Platform "FANZ" always;
      
      # Ad rate limiting
      limit_req_zone $binary_remote_addr zone=ads_ratelimit:10m rate=300r/m;
      limit_req zone=ads_ratelimit burst=60 nodelay;
spec:
  rules:
  - host: ads.fanz.fans
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fanz-ads-service
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: fanz-ads-api
            port:
              number: 8080