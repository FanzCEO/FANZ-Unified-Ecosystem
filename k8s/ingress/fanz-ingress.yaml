apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fanz-api-ingress
  namespace: fanz-production
  labels:
    app.kubernetes.io/name: fanz-ingress
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: ingress
  annotations:
    # SSL Configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    kubernetes.io/ingress.class: "nginx"
    
    # Security Headers
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES128-GCM-SHA256"
    
    # Rate Limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # CORS Configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://fanz.network,https://boyfanz.com,https://girlfanz.com,https://pupfanz.com,https://taboofanz.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET,POST,PUT,DELETE,OPTIONS,HEAD"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-max-age: "86400"
    
    # Security Headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' https:; media-src 'self' https:; object-src 'none'; frame-ancestors 'none';";
    
    # Request Size Limits
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/client-body-buffer-size: "10m"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # Load Balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$request_uri"
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
spec:
  tls:
  - hosts:
    - api.fanz.network
    - ai.fanz.network
    secretName: fanz-tls-secret
  rules:
  - host: api.fanz.network
    http:
      paths:
      - path: /api/v1/auth
        pathType: Prefix
        backend:
          service:
            name: fanz-auth
            port:
              number: 3000
      - path: /api/v1/social
        pathType: Prefix
        backend:
          service:
            name: fanz-social
            port:
              number: 3000
      - path: /api/v1/media
        pathType: Prefix
        backend:
          service:
            name: fanz-media-core
            port:
              number: 3000
      - path: /api/v1
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              number: 3000
      - path: /health
        pathType: Exact
        backend:
          service:
            name: api-gateway
            port:
              number: 3000
  - host: ai.fanz.network
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fanz-ai-integration
            port:
              number: 3000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fanz-frontend-ingress
  namespace: fanz-production
  labels:
    app.kubernetes.io/name: fanz-frontend-ingress
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: frontend
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Frontend-specific optimizations
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    
    # Static asset caching
    nginx.ingress.kubernetes.io/server-snippet: |
      location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
      }
      
      location ~* \.(html)$ {
        expires 5m;
        add_header Cache-Control "public, no-cache";
      }
    
    # Gzip compression
    nginx.ingress.kubernetes.io/enable-gzip: "true"
    nginx.ingress.kubernetes.io/gzip-types: "text/plain,text/css,application/json,application/javascript,text/xml,application/xml,application/xml+rss,text/javascript"
spec:
  tls:
  - hosts:
    - fanz.network
    - boyfanz.com
    - girlfanz.com
    - pupfanz.com
    - taboofanz.com
    secretName: fanz-frontend-tls-secret
  rules:
  - host: fanz.network
    http:
      paths:
      - path: /(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: fanz-frontend
            port:
              number: 3000
  - host: boyfanz.com
    http:
      paths:
      - path: /(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: boyfanz-frontend
            port:
              number: 3000
  - host: girlfanz.com
    http:
      paths:
      - path: /(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: girlfanz-frontend
            port:
              number: 3000
  - host: pupfanz.com
    http:
      paths:
      - path: /(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: pupfanz-frontend
            port:
              number: 3000
  - host: taboofanz.com
    http:
      paths:
      - path: /(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: taboofanz-frontend
            port:
              number: 3000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fanz-monitoring-ingress
  namespace: fanz-production
  labels:
    app.kubernetes.io/name: fanz-monitoring-ingress
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: monitoring
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    
    # Basic Auth for monitoring endpoints
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: fanz-monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: "FANZ Monitoring - Authentication Required"
    
    # Whitelist internal IPs only
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
spec:
  tls:
  - hosts:
    - monitoring.fanz.network
    secretName: fanz-monitoring-tls-secret
  rules:
  - host: monitoring.fanz.network
    http:
      paths:
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090
      - path: /alertmanager
        pathType: Prefix
        backend:
          service:
            name: alertmanager
            port:
              number: 9093
---
# Network Policy for Ingress
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fanz-ingress-network-policy
  namespace: fanz-production
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: ingress
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from: []  # Allow from anywhere (internet traffic)
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  egress:
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/part-of: fanz-ecosystem
    ports:
    - protocol: TCP
      port: 3000
  - to: []  # Allow DNS resolution
    ports:
    - protocol: UDP
      port: 53