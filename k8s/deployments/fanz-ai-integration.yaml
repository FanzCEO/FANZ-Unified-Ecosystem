apiVersion: apps/v1
kind: Deployment
metadata:
  name: fanz-ai-integration
  namespace: fanz-production
  labels:
    app.kubernetes.io/name: fanz-ai-integration
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: ai
    app.kubernetes.io/part-of: fanz-ecosystem
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: fanz-ai-integration
      app.kubernetes.io/instance: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fanz-ai-integration
        app.kubernetes.io/instance: production
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: ai
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: ai-integration
        image: registry.fanz.network/fanz-ai-integration:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: fanz-app-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: fanz-app-config
              key: PORT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: fanz-app-config
              key: LOG_LEVEL
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: fanz-ai-secret
              key: OPENAI_API_KEY
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: fanz-ai-secret
              key: ANTHROPIC_API_KEY
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: fanz-redis-secret
              key: REDIS_URL
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: fanz-database-secret
              key: DATABASE_URL
        - name: AI_ENABLED
          valueFrom:
            configMapKeyRef:
              name: fanz-app-config
              key: AI_ENABLED
        - name: AI_MAX_TOKENS
          valueFrom:
            configMapKeyRef:
              name: fanz-app-config
              key: AI_MAX_TOKENS
        - name: AI_TEMPERATURE
          valueFrom:
            configMapKeyRef:
              name: fanz-app-config
              key: AI_TEMPERATURE
        - name: AI_MODEL
          valueFrom:
            configMapKeyRef:
              name: fanz-app-config
              key: AI_MODEL
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir:
          sizeLimit: 1Gi
      - name: logs
        emptyDir:
          sizeLimit: 5Gi
      imagePullSecrets:
      - name: registry-secret
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: fanz-ai-integration
  namespace: fanz-production
  labels:
    app.kubernetes.io/name: fanz-ai-integration
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: ai
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: fanz-ai-integration
    app.kubernetes.io/instance: production
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fanz-ai-integration-hpa
  namespace: fanz-production
  labels:
    app.kubernetes.io/name: fanz-ai-integration
    app.kubernetes.io/instance: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fanz-ai-integration
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fanz-ai-integration-pdb
  namespace: fanz-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: fanz-ai-integration
      app.kubernetes.io/instance: production