apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: fanz-production
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - name: postgres
    port: 5432
    targetPort: postgres
    protocol: TCP
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: production
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless
  namespace: fanz-production
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgres
    port: 5432
    targetPort: postgres
    protocol: TCP
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: production
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: fanz-production
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "14.9"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: fanz-ecosystem
spec:
  serviceName: postgres-headless
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/instance: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/instance: production
        app.kubernetes.io/version: "14.9"
        app.kubernetes.io/component: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      initContainers:
      - name: postgres-init
        image: postgres:14.9-alpine
        command:
        - sh
        - -c
        - |
          chown -R 999:999 /var/lib/postgresql/data
          chmod 700 /var/lib/postgresql/data
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      containers:
      - name: postgres
        image: postgres:14.9-alpine
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: fanz-database-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fanz-database-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: fanz-database-secret
              key: POSTGRES_DB
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgres-config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
        - name: tmp
          mountPath: /tmp
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.13.2
        ports:
        - name: metrics
          containerPort: 9187
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        env:
        - name: DATA_SOURCE_URI
          value: "localhost:5432/postgres?sslmode=disable"
        - name: DATA_SOURCE_USER
          valueFrom:
            secretKeyRef:
              name: fanz-database-secret
              key: POSTGRES_USER
        - name: DATA_SOURCE_PASS
          valueFrom:
            secretKeyRef:
              name: fanz-database-secret
              key: POSTGRES_PASSWORD
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
      - name: tmp
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/instance: production
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: fanz-production
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
data:
  postgresql.conf: |
    # PostgreSQL Configuration for FANZ Production
    
    # Connection Settings
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    superuser_reserved_connections = 3
    
    # Memory Settings
    shared_buffers = 1GB
    effective_cache_size = 3GB
    work_mem = 16MB
    maintenance_work_mem = 256MB
    
    # Write-Ahead Logging
    wal_level = replica
    max_wal_size = 2GB
    min_wal_size = 80MB
    checkpoint_completion_target = 0.9
    
    # Replication Settings
    max_wal_senders = 10
    max_replication_slots = 10
    hot_standby = on
    hot_standby_feedback = on
    
    # Query Tuning
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging Settings
    log_destination = 'stderr'
    logging_collector = off
    log_statement = 'all'
    log_duration = on
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_lock_waits = on
    log_min_duration_statement = 1000
    
    # Statistics Settings
    track_activities = on
    track_counts = on
    track_io_timing = on
    track_functions = all
    stats_temp_directory = '/tmp'
    
    # Security Settings
    ssl = off  # Handled by ingress
    password_encryption = scram-sha-256
    
    # Performance Settings
    shared_preload_libraries = 'pg_stat_statements'
    
  pg_hba.conf: |
    # PostgreSQL Host-Based Authentication Configuration
    
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    
    # Local connections
    local   all             postgres                                scram-sha-256
    local   all             all                                     scram-sha-256
    
    # IPv4 connections
    host    all             all             0.0.0.0/0               scram-sha-256
    
    # IPv6 connections
    host    all             all             ::0/0                   scram-sha-256
    
    # Replication connections
    host    replication     all             0.0.0.0/0               scram-sha-256
    host    replication     all             ::0/0                   scram-sha-256
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgres-pdb
  namespace: fanz-production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/instance: production
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgres-network-policy
  namespace: fanz-production
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: postgres
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/part-of: fanz-ecosystem
    ports:
    - protocol: TCP
      port: 5432
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 9187
  egress:
  - to: []
    ports:
    - protocol: UDP
      port: 53  # DNS
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: postgres
    ports:
    - protocol: TCP
      port: 5432  # Postgres replication