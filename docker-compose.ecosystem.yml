# FANZ Unified Ecosystem - Complete Development Stack
# 
# This compose file creates the entire FANZ ecosystem locally:
# 
# Architecture:
# FanzLanding → Auth → API Gateway → Platforms (BoyFanz, GirlFanz, PupFanz)
# Media Hub → FanzHubVault (CDN) → Event Bus → Analytics/Search/Notifications
# FanzFinance → Payment Processor → Event Bus → Core DB/Analytics/FanzDash
# FanzDash ← Event Bus ← All Systems (command center)

version: '3.8'

services:
  # ===========================================
  # CORE INFRASTRUCTURE
  # ===========================================
  
  # Core Database - PostgreSQL
  postgres-core:
    image: postgres:15-alpine
    container_name: fanz-core-db
    environment:
      POSTGRES_DB: fanz_core_db
      POSTGRES_USER: fanz_user
      POSTGRES_PASSWORD: fanz_secure_password_123
    ports:
      - "5432:5432"
    volumes:
      - postgres_core_data:/var/lib/postgresql/data
      - ./database/unified-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fanz_user -d fanz_core_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fanz-ecosystem

  # Redis - Session Management & Caching
  redis-cache:
    image: redis:7-alpine
    container_name: fanz-redis
    command: redis-server --appendonly yes --requirepass fanz_redis_password_123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "fanz_redis_password_123", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fanz-ecosystem

  # ===========================================
  # EVENT STREAMING INFRASTRUCTURE
  # ===========================================
  
  # Zookeeper - Kafka Coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: fanz-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - fanz-ecosystem

  # Kafka - Event Streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: fanz-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    ports:
      - "9092:9092"
      - "19092:19092"
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server localhost:9092
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fanz-ecosystem

  # ===========================================
  # OBJECT STORAGE & CDN
  # ===========================================
  
  # MinIO - Object Storage (FanzHubVault)
  minio-vault:
    image: minio/minio:latest
    container_name: fanz-hub-vault
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: fanz_access_key
      MINIO_ROOT_PASSWORD: fanz_secret_key_super_secure_123456789
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_vault_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - fanz-ecosystem

  # ===========================================
  # SEARCH & ANALYTICS
  # ===========================================
  
  # OpenSearch - Content Discovery & Analytics
  opensearch:
    image: opensearchproject/opensearch:2.9.0
    container_name: fanz-opensearch
    environment:
      - discovery.type=single-node
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - plugins.security.disabled=true
      - node.name=opensearch-node1
      - cluster.name=fanz-cluster
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fanz-ecosystem

  # ===========================================
  # FANZ CORE SERVICES
  # ===========================================
  
  # Central Command - Event Bus (fanz_central_command)
  fanz-central-command:
    build:
      context: ./services/fanz-central-command
      dockerfile: Dockerfile
    container_name: fanz-central-command
    environment:
      - NODE_ENV=development
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=fanz-central-command
      - KAFKA_GROUP_ID=fanz-central-command-group
      - REDIS_HOST=redis-cache
      - REDIS_PORT=6379
      - REDIS_PASSWORD=fanz_redis_password_123
      - REDIS_DB=0
      - SCHEMA_PATH=/app/events/schemas
      - VALIDATE_EVENTS=true
    depends_on:
      kafka:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    volumes:
      - ./events:/app/events:ro
      - ./services/fanz-central-command:/app
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fanz-ecosystem

  # API Gateway - Unified routing
  fanz-api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: fanz-api-gateway
    environment:
      - NODE_ENV=development
      - PORT=3000
      - JWT_SECRET=fanz_jwt_super_secret_key_for_development_only_12345678
      - JWT_EXPIRES_IN=24h
      - REDIS_HOST=redis-cache
      - REDIS_PORT=6379
      - REDIS_PASSWORD=fanz_redis_password_123
      - REDIS_DB=1
      - ADULT_CONTENT_ENABLED=true
      - ADULT_VERIFICATION_REQUIRED=true
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:3002,http://localhost:3003
    depends_on:
      redis-cache:
        condition: service_healthy
      fanz-central-command:
        condition: service_healthy
    volumes:
      - ./services/api-gateway:/app
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fanz-ecosystem

  # ===========================================
  # CORE PLATFORM SERVICES
  # ===========================================
  
  # Auth Service - SSO/OAuth2
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: fanz-auth-service
    environment:
      - NODE_ENV=development
      - PORT=3040
      - DATABASE_URL=postgresql://fanz_user:fanz_secure_password_123@postgres-core:5432/fanz_core_db
      - JWT_SECRET=fanz_jwt_super_secret_key_for_development_only_12345678
      - OAUTH_GOOGLE_CLIENT_ID=your-google-client-id
      - OAUTH_GOOGLE_CLIENT_SECRET=your-google-client-secret
      - OAUTH_TWITTER_CLIENT_ID=your-twitter-client-id
      - OAUTH_TWITTER_CLIENT_SECRET=your-twitter-client-secret
    depends_on:
      postgres-core:
        condition: service_healthy
      fanz-central-command:
        condition: service_healthy
    ports:
      - "3040:3040"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3040/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fanz-ecosystem

  # Media Hub - Content processing & moderation
  media-hub:
    build:
      context: ./services/media-hub
      dockerfile: Dockerfile
    container_name: fanz-media-hub
    environment:
      - NODE_ENV=development
      - PORT=3010
      - DATABASE_URL=postgresql://fanz_user:fanz_secure_password_123@postgres-core:5432/fanz_core_db
      - MINIO_ENDPOINT=minio-vault:9000
      - MINIO_ACCESS_KEY=fanz_access_key
      - MINIO_SECRET_KEY=fanz_secret_key_super_secure_123456789
      - MINIO_BUCKET=fanzhub-content
      - AI_MODERATION_ENABLED=true
      - CONTENT_INTELLIGENCE_ENABLED=true
    depends_on:
      postgres-core:
        condition: service_healthy
      minio-vault:
        condition: service_healthy
      fanz-central-command:
        condition: service_healthy
    volumes:
      - media_processing_temp:/tmp/media-processing
    ports:
      - "3010:3010"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fanz-ecosystem

  # FanzFinance - Payment processing & payouts
  fanz-finance:
    build:
      context: ./services/fanz-finance
      dockerfile: Dockerfile
    container_name: fanz-finance
    environment:
      - NODE_ENV=development
      - PORT=3020
      - DATABASE_URL=postgresql://fanz_user:fanz_secure_password_123@postgres-core:5432/fanz_core_db
      - CCBILL_ACCOUNT_NUMBER=your-ccbill-account
      - CCBILL_SUB_ACCOUNT=your-ccbill-subaccount
      - CCBILL_FLEXFORMS_ID=your-ccbill-flexforms-id
      - CCBILL_SALT=your-ccbill-salt
      - SEGPAY_PACKAGE_ID=your-segpay-package-id
      - SEGPAY_SITE_ID=your-segpay-site-id
      - PAXUM_API_KEY=your-paxum-api-key
      - PAXUM_API_SECRET=your-paxum-api-secret
      - KYC_PROVIDER=jumio
      - TAX_CALCULATION_ENABLED=true
      - FRAUD_DETECTION_ENABLED=true
    depends_on:
      postgres-core:
        condition: service_healthy
      fanz-central-command:
        condition: service_healthy
    ports:
      - "3020:3020"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3020/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fanz-ecosystem

  # FanzDash - Admin dashboard & control center
  fanz-dash:
    build:
      context: ./services/fanz-dash
      dockerfile: Dockerfile
    container_name: fanz-dash
    environment:
      - NODE_ENV=development
      - PORT=3030
      - DATABASE_URL=postgresql://fanz_user:fanz_secure_password_123@postgres-core:5432/fanz_core_db
      - OPENSEARCH_URL=http://opensearch:9200
      - ADMIN_EMAIL=admin@fanz.dev
      - ADMIN_PASSWORD_HASH=${ADMIN_PASSWORD_HASH:-CHANGE_ME_SECURE_HASH}
      - CREATOR_ANALYTICS_ENABLED=true
      - PAYOUT_AUTOMATION_ENABLED=true
      - MODERATION_QUEUE_ENABLED=true
    depends_on:
      postgres-core:
        condition: service_healthy
      opensearch:
        condition: service_healthy
      fanz-central-command:
        condition: service_healthy
    ports:
      - "3030:3030"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3030/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fanz-ecosystem

  # ===========================================
  # PLATFORM SERVICES (BoyFanz, GirlFanz, PupFanz)
  # ===========================================
  
  # BoyFanz Platform
  boyfanz-service:
    build:
      context: ./platforms/boyfanz
      dockerfile: Dockerfile
    container_name: boyfanz-platform
    environment:
      - NODE_ENV=development
      - PORT=3001
      - PLATFORM_NAME=BoyFanz
      - API_GATEWAY_URL=http://fanz-api-gateway:3000
      - CDN_URL=http://minio-vault:9000/fanzhub-content
      - ADULT_CONTENT_ENABLED=true
      - PLATFORM_THEME=boys
    depends_on:
      fanz-api-gateway:
        condition: service_healthy
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fanz-ecosystem

  # GirlFanz Platform  
  girlfanz-service:
    build:
      context: ./platforms/girlfanz
      dockerfile: Dockerfile
    container_name: girlfanz-platform
    environment:
      - NODE_ENV=development
      - PORT=3002
      - PLATFORM_NAME=GirlFanz
      - API_GATEWAY_URL=http://fanz-api-gateway:3000
      - CDN_URL=http://minio-vault:9000/fanzhub-content
      - ADULT_CONTENT_ENABLED=true
      - PLATFORM_THEME=girls
    depends_on:
      fanz-api-gateway:
        condition: service_healthy
    ports:
      - "3002:3002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fanz-ecosystem

  # PupFanz Platform
  pupfanz-service:
    build:
      context: ./platforms/pupfanz
      dockerfile: Dockerfile  
    container_name: pupfanz-platform
    environment:
      - NODE_ENV=development
      - PORT=3003
      - PLATFORM_NAME=PupFanz
      - API_GATEWAY_URL=http://fanz-api-gateway:3000
      - CDN_URL=http://minio-vault:9000/fanzhub-content
      - ADULT_CONTENT_ENABLED=true
      - PLATFORM_THEME=pups
    depends_on:
      fanz-api-gateway:
        condition: service_healthy
    ports:
      - "3003:3003"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fanz-ecosystem

  # ===========================================
  # FANZ LANDING & ONBOARDING
  # ===========================================
  
  # FanzLanding - Marketing & onboarding
  fanz-landing:
    build:
      context: ./apps/fanz-landing
      dockerfile: Dockerfile
    container_name: fanz-landing
    environment:
      - NODE_ENV=development
      - PORT=3050
      - API_GATEWAY_URL=http://fanz-api-gateway:3000
      - AUTH_SERVICE_URL=http://auth-service:3040
      - PLATFORM_URLS=http://localhost:3001,http://localhost:3002,http://localhost:3003
    depends_on:
      fanz-api-gateway:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    ports:
      - "3050:3050"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3050/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fanz-ecosystem

  # ===========================================
  # MONITORING & OBSERVABILITY  
  # ===========================================
  
  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: fanz-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.route-prefix=/'
    networks:
      - fanz-ecosystem

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: fanz-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=fanz_grafana_admin_123
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "4000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - fanz-ecosystem

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: fanz-jaeger
    ports:
      - "16686:16686"   # UI
      - "14268:14268"   # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - fanz-ecosystem

# ===========================================
# NETWORKS
# ===========================================

networks:
  fanz-ecosystem:
    name: fanz-ecosystem
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# ===========================================
# VOLUMES
# ===========================================

volumes:
  postgres_core_data:
    name: fanz_postgres_core_data
  redis_data:
    name: fanz_redis_data
  minio_vault_data:
    name: fanz_minio_vault_data
  opensearch_data:
    name: fanz_opensearch_data
  media_processing_temp:
    name: fanz_media_processing_temp
  prometheus_data:
    name: fanz_prometheus_data
  grafana_data:
    name: fanz_grafana_data