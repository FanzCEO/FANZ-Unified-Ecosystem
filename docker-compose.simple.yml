version: '3.8'

services:
  # Core Infrastructure Only - Let's get the basics running first
  
  postgres:
    image: postgres:15-alpine
    container_name: fanz-postgres
    environment:
      POSTGRES_DB: fanz_core_db
      POSTGRES_USER: fanz_user
      POSTGRES_PASSWORD: fanz_secure_password_123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fanz_user -d fanz_core_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: fanz-redis
    command: redis-server --appendonly yes --requirepass fanz_redis_password_123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "fanz_redis_password_123", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fanz-network

  # Kafka Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: fanz-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - fanz-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: fanz-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server localhost:9092
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fanz-network

  # Object Storage
  minio:
    image: minio/minio:latest
    container_name: fanz-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: fanz_access_key
      MINIO_ROOT_PASSWORD: fanz_secret_key_super_secure_123456789
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - fanz-network

  # Search & Analytics
  opensearch:
    image: opensearchproject/opensearch:2.9.0
    container_name: fanz-opensearch
    environment:
      - discovery.type=single-node
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - plugins.security.disabled=true
    ports:
      - "9200:9200"
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fanz-network

  # Simple API Gateway (using nginx for now)
  api-gateway:
    image: nginx:alpine
    container_name: fanz-api-gateway
    ports:
      - "3000:80"
    volumes:
      - ./temp-configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./temp-configs/api-gateway.html:/usr/share/nginx/html/index.html:ro
    depends_on:
      - postgres
      - redis
    networks:
      - fanz-network

  # Temporary service endpoints (until we build the real ones)
  fanzdash:
    image: nginx:alpine
    container_name: fanz-dash
    ports:
      - "3030:80"
    volumes:
      - ./temp-configs/fanzdash.html:/usr/share/nginx/html/index.html:ro
    networks:
      - fanz-network

  boyfanz:
    image: nginx:alpine
    container_name: boyfanz-platform
    ports:
      - "3001:80"
    volumes:
      - ./temp-configs/boyfanz.html:/usr/share/nginx/html/index.html:ro
    networks:
      - fanz-network

  girlfanz:
    image: nginx:alpine
    container_name: girlfanz-platform
    ports:
      - "3002:80"
    volumes:
      - ./temp-configs/girlfanz.html:/usr/share/nginx/html/index.html:ro
    networks:
      - fanz-network

  pupfanz:
    image: nginx:alpine
    container_name: pupfanz-platform
    ports:
      - "3003:80"
    volumes:
      - ./temp-configs/pupfanz.html:/usr/share/nginx/html/index.html:ro
    networks:
      - fanz-network

  # Landing page
  fanz-landing:
    image: nginx:alpine
    container_name: fanz-landing
    ports:
      - "3050:80"
    volumes:
      - ./temp-configs/landing.html:/usr/share/nginx/html/index.html:ro
    networks:
      - fanz-network

networks:
  fanz-network:
    name: fanz-network
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  opensearch_data: