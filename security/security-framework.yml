# üõ°Ô∏è FANZ Unified Ecosystem - Military-Grade Security Framework
# Advanced security configuration for enterprise-grade protection

version: '3.8'

# üîí Security Services Stack
services:
  # ============================================
  # üõ°Ô∏è WEB APPLICATION FIREWALL (WAF)
  # ============================================
  
  # ModSecurity WAF with OWASP Core Rule Set
  waf:
    image: owasp/modsecurity-crs:apache
    container_name: fanz_waf
    restart: unless-stopped
    environment:
      - PARANOIA=2
      - ANOMALY_INBOUND=5
      - ANOMALY_OUTBOUND=4
      - BACKEND=http://nginx:80
      - BACKEND_WS=ws://nginx:80
      - ERRORLOG=/var/log/apache2/error.log
      - ACCESSLOG=/var/log/apache2/access.log
      - MODSEC_AUDIT_LOG_FORMAT=JSON
      - MODSEC_AUDIT_LOG=/var/log/apache2/modsec_audit.log
    ports:
      - "8443:80"
    volumes:
      - ./security/waf/custom-rules:/etc/modsecurity.d/custom-rules
      - ./logs/waf:/var/log/apache2
    networks:
      - fanz_security
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # üîê SECRETS MANAGEMENT - HashiCorp Vault
  # ============================================
  
  vault:
    image: vault:latest
    container_name: fanz_vault
    restart: unless-stopped
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_ROOT_TOKEN:-fanz_vault_root_2024}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_API_ADDR=http://0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
      - ./security/vault/config:/vault/config
      - ./security/vault/policies:/vault/policies
    command: vault server -dev -dev-root-token-id=${VAULT_ROOT_TOKEN:-fanz_vault_root_2024}
    networks:
      - fanz_security
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # üö® INTRUSION DETECTION - Fail2Ban
  # ============================================
  
  fail2ban:
    build:
      context: ./security/fail2ban
      dockerfile: Dockerfile
    container_name: fanz_fail2ban
    restart: unless-stopped
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./logs:/var/log/fanz:ro
      - ./security/fail2ban/jail.local:/etc/fail2ban/jail.local:ro
      - ./security/fail2ban/filter.d:/etc/fail2ban/filter.d:ro
      - fail2ban_data:/var/lib/fail2ban
    environment:
      - TZ=UTC

  # ============================================
  # üïµÔ∏è SECURITY MONITORING - OSSEC HIDS
  # ============================================
  
  ossec:
    image: atomicorp/ossec-hids
    container_name: fanz_ossec
    restart: unless-stopped
    volumes:
      - ./logs:/var/log/fanz:ro
      - ./security/ossec/ossec.conf:/var/ossec/etc/ossec.conf:ro
      - ossec_data:/var/ossec/var
    networks:
      - fanz_security
    environment:
      - SYSLOG_FORWARDING_ENABLED=1
      - SYSLOG_FORWARDING_SERVER_IP=172.16.1.100

  # ============================================
  # üîç VULNERABILITY SCANNER - OpenVAS
  # ============================================
  
  openvas:
    image: mikesplain/openvas
    container_name: fanz_openvas
    restart: unless-stopped
    ports:
      - "9390:9390"
    environment:
      - OV_PASSWORD=${OPENVAS_PASSWORD:-FanzOpenVAS_2024!}
    volumes:
      - openvas_data:/var/lib/openvas
    networks:
      - fanz_security

  # ============================================
  # üìä SECURITY ANALYTICS - ELK Stack Enhanced
  # ============================================
  
  # Enhanced Elasticsearch with Security
  elasticsearch-security:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: fanz_elasticsearch_security
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-FanzElastic_2024!}
      - xpack.license.self_generated.type=basic
    volumes:
      - elasticsearch_security_data:/usr/share/elasticsearch/data
      - ./security/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9201:9200"
    networks:
      - fanz_security

  # Enhanced Kibana with Security
  kibana-security:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: fanz_kibana_security
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-security:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD:-FanzElastic_2024!}
    ports:
      - "5602:5601"
    networks:
      - fanz_security
    depends_on:
      - elasticsearch-security

  # ============================================
  # üåê VPN SERVER - WireGuard
  # ============================================
  
  wireguard:
    image: linuxserver/wireguard
    container_name: fanz_wireguard
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
      - SERVERURL=${WG_SERVERURL:-myfanz.network}
      - SERVERPORT=51820
      - PEERS=10
      - PEERDNS=auto
    volumes:
      - wireguard_data:/config
      - /lib/modules:/lib/modules
    ports:
      - "51820:51820/udp"
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      - fanz_security

  # ============================================
  # üîê CERTIFICATE MANAGEMENT - Let's Encrypt
  # ============================================
  
  certbot:
    image: certbot/certbot
    container_name: fanz_certbot
    volumes:
      - certbot_data:/etc/letsencrypt
      - ./security/certbot:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --email admin@myfanz.network -d myfanz.network -d www.myfanz.network -d api.myfanz.network --agree-tos --no-eff-email

  # ============================================
  # üìà SECURITY METRICS - Prometheus Enhanced
  # ============================================
  
  prometheus-security:
    image: prom/prometheus:latest
    container_name: fanz_prometheus_security
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus-security.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./security/prometheus/prometheus-security.yml:/etc/prometheus/prometheus-security.yml
      - prometheus_security_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - fanz_security

# üåê Security Networks
networks:
  fanz_security:
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.0.0/16
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"

# üíæ Security Volumes
volumes:
  vault_data:
    driver: local
  fail2ban_data:
    driver: local
  ossec_data:
    driver: local
  openvas_data:
    driver: local
  elasticsearch_security_data:
    driver: local
  wireguard_data:
    driver: local
  certbot_data:
    driver: local
  prometheus_security_data:
    driver: local

# üõ°Ô∏è Security Framework Features:
#
# ‚úÖ Web Application Firewall (ModSecurity + OWASP CRS)
# ‚úÖ Secrets Management (HashiCorp Vault)
# ‚úÖ Intrusion Detection & Prevention (Fail2Ban + OSSEC)
# ‚úÖ Vulnerability Scanning (OpenVAS)
# ‚úÖ Security Analytics (Enhanced ELK Stack)
# ‚úÖ VPN Access (WireGuard)
# ‚úÖ SSL/TLS Management (Let's Encrypt)
# ‚úÖ Security Monitoring (Enhanced Prometheus)
# ‚úÖ Network Segmentation (Isolated security network)
# ‚úÖ Military-Grade Encryption (AES-256, RSA-4096)
#
# üéØ Security Compliance:
# - SOC 2 Type II Ready
# - GDPR Compliant
# - HIPAA Ready
# - PCI DSS Level 1
# - ISO 27001 Aligned
# - NIST Cybersecurity Framework