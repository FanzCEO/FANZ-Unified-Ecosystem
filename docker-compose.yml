# üöÄ FANZ Unified Ecosystem - Docker Compose
# Complete deployment pipeline for all 13 consolidated platforms
version: '3.8'

# üåê Networks
networks:
  fanz_ecosystem:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# üì¶ Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_storage:
    driver: local
  logs:
    driver: local

# üîß Services
services:
  # ============================================
  # üóÑÔ∏è CORE INFRASTRUCTURE
  # ============================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fanz_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: fanz_unified
      POSTGRES_USER: fanz_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-fanz_secure_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fanz_user -d fanz_unified"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Sessions
  redis:
    image: redis:7-alpine
    container_name: fanz_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-fanz_redis_password} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message Queue (RabbitMQ)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: fanz_rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: fanz_user
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-fanz_rabbitmq_password}
      RABBITMQ_DEFAULT_VHOST: fanz
    volumes:
      - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - fanz_ecosystem
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # üîê AUTHENTICATION & API GATEWAY
  # ============================================
  
  # Authentication Service
  auth_service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: fanz_auth
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://fanz_user:${POSTGRES_PASSWORD:-fanz_secure_password}@postgres:5432/fanz_unified
      - REDIS_URL=redis://:${REDIS_PASSWORD:-fanz_redis_password}@redis:6379
      - JWT_SECRET=${JWT_SECRET:-fanz_super_secret_jwt_key}
      - JWT_EXPIRY=24h
      - REFRESH_TOKEN_EXPIRY=30d
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3001:3001"
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - logs:/app/logs

  # API Gateway
  api_gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: fanz_gateway
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=8080
      - REDIS_URL=redis://:${REDIS_PASSWORD:-fanz_redis_password}@redis:6379
      - JWT_SECRET=${JWT_SECRET:-fanz_super_secret_jwt_key}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,https://myfanz.network}
      # Service URLs
      - AUTH_SERVICE_URL=http://auth_service:3001
      - FANZ_SOCIAL_URL=http://fanz_social:3002
      - FANZTUBE_URL=http://fanz_tube:3003
      - FANZCOMMERCE_URL=http://fanz_commerce:3004
      - FANZSPICYAI_URL=http://fanz_ai:3005
      - FANZMEDIA_URL=http://fanz_media:3006
      - FANZDASH_URL=http://fanz_dash:3007
      - FANZLANDING_URL=http://fanz_landing:3008
      - FANZFILIATE_URL=http://fanz_affiliate:3009
      - FANZHUB_URL=http://fanz_hub:3010
      - STARZCARDS_URL=http://starz_cards:3011
      - CLUBCENTRAL_URL=http://club_central:3012
      - MIGRATION_HQ_URL=http://migration_hq:3013
      - FANZOS_URL=http://fanz_os:3014
    depends_on:
      auth_service:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - logs:/app/logs

  # ============================================
  # üé¨ CONTENT & MEDIA PLATFORMS
  # ============================================
  
  # Fanz Social Platform
  fanz_social:
    build:
      context: ./Fanz
      dockerfile: Dockerfile
    container_name: fanz_social
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=postgresql://fanz_user:${POSTGRES_PASSWORD:-fanz_secure_password}@postgres:5432/fanz_unified
      - REDIS_URL=redis://:${REDIS_PASSWORD:-fanz_redis_password}@redis:6379
      - API_GATEWAY_URL=http://api_gateway:8080
      - MEDIA_STORAGE_PATH=/app/media
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - media_storage:/app/media
      - logs:/app/logs
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FanzTube Video Platform
  fanz_tube:
    build:
      context: ./FanzTube
      dockerfile: Dockerfile
    container_name: fanz_tube
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_URL=postgresql://fanz_user:${POSTGRES_PASSWORD:-fanz_secure_password}@postgres:5432/fanz_unified
      - REDIS_URL=redis://:${REDIS_PASSWORD:-fanz_redis_password}@redis:6379
      - API_GATEWAY_URL=http://api_gateway:8080
      - MEDIA_STORAGE_PATH=/app/media
      - VIDEO_PROCESSING_ENABLED=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - media_storage:/app/media
      - logs:/app/logs
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FanzCommerce E-commerce Platform
  fanz_commerce:
    build:
      context: ./FanzCommerceV1
      dockerfile: Dockerfile
    container_name: fanz_commerce
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DATABASE_URL=postgresql://fanz_user:${POSTGRES_PASSWORD:-fanz_secure_password}@postgres:5432/fanz_unified
      - REDIS_URL=redis://:${REDIS_PASSWORD:-fanz_redis_password}@redis:6379
      - API_GATEWAY_URL=http://api_gateway:8080
      - PAYMENT_PROCESSOR_URL=${PAYMENT_PROCESSOR_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - logs:/app/logs
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FanzSpicyAI Platform
  fanz_ai:
    build:
      context: ./FanzSpicyAi
      dockerfile: Dockerfile
    container_name: fanz_ai
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3005
      - DATABASE_URL=postgresql://fanz_user:${POSTGRES_PASSWORD:-fanz_secure_password}@postgres:5432/fanz_unified
      - REDIS_URL=redis://:${REDIS_PASSWORD:-fanz_redis_password}@redis:6379
      - API_GATEWAY_URL=http://api_gateway:8080
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AI_MODEL_ENDPOINT=${AI_MODEL_ENDPOINT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - logs:/app/logs
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FanzMedia Processing
  fanz_media:
    build:
      context: ./FanzMediaCore
      dockerfile: Dockerfile
    container_name: fanz_media
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3006
      - DATABASE_URL=postgresql://fanz_user:${POSTGRES_PASSWORD:-fanz_secure_password}@postgres:5432/fanz_unified
      - REDIS_URL=redis://:${REDIS_PASSWORD:-fanz_redis_password}@redis:6379
      - API_GATEWAY_URL=http://api_gateway:8080
      - MEDIA_STORAGE_PATH=/app/media
      - CDN_URL=${CDN_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - media_storage:/app/media
      - logs:/app/logs
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # üìä MANAGEMENT & TOOLS
  # ============================================
  
  # FanzDash Analytics
  fanz_dash:
    build:
      context: ./FanzDash
      dockerfile: Dockerfile
    container_name: fanz_dash
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3007
      - DATABASE_URL=postgresql://fanz_user:${POSTGRES_PASSWORD:-fanz_secure_password}@postgres:5432/fanz_unified
      - REDIS_URL=redis://:${REDIS_PASSWORD:-fanz_redis_password}@redis:6379
      - API_GATEWAY_URL=http://api_gateway:8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - logs:/app/logs
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FanzLanding Marketing
  fanz_landing:
    build:
      context: ./FanzLanding
      dockerfile: Dockerfile
    container_name: fanz_landing
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3008
      - DATABASE_URL=postgresql://fanz_user:${POSTGRES_PASSWORD:-fanz_secure_password}@postgres:5432/fanz_unified
      - REDIS_URL=redis://:${REDIS_PASSWORD:-fanz_redis_password}@redis:6379
      - API_GATEWAY_URL=http://api_gateway:8080
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - logs:/app/logs
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FanzFiliate Affiliate System
  fanz_affiliate:
    build:
      context: ./FanzFiliate
      dockerfile: Dockerfile
    container_name: fanz_affiliate
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3009
      - DATABASE_URL=postgresql://fanz_user:${POSTGRES_PASSWORD:-fanz_secure_password}@postgres:5432/fanz_unified
      - REDIS_URL=redis://:${REDIS_PASSWORD:-fanz_redis_password}@redis:6379
      - API_GATEWAY_URL=http://api_gateway:8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - logs:/app/logs
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FanzHub Content Management
  fanz_hub:
    build:
      context: ./FanzHubVaultV1
      dockerfile: Dockerfile
    container_name: fanz_hub
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3010
      - DATABASE_URL=postgresql://fanz_user:${POSTGRES_PASSWORD:-fanz_secure_password}@postgres:5432/fanz_unified
      - REDIS_URL=redis://:${REDIS_PASSWORD:-fanz_redis_password}@redis:6379
      - API_GATEWAY_URL=http://api_gateway:8080
      - STORAGE_PATH=/app/vault
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - media_storage:/app/vault
      - logs:/app/logs
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # StarzCards NFT Platform
  starz_cards:
    build:
      context: ./StarzCardsV1
      dockerfile: Dockerfile
    container_name: starz_cards
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3011
      - DATABASE_URL=postgresql://fanz_user:${POSTGRES_PASSWORD:-fanz_secure_password}@postgres:5432/fanz_unified
      - REDIS_URL=redis://:${REDIS_PASSWORD:-fanz_redis_password}@redis:6379
      - API_GATEWAY_URL=http://api_gateway:8080
      - BLOCKCHAIN_ENDPOINT=${BLOCKCHAIN_ENDPOINT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - logs:/app/logs
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3011/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ClubCentral Community Management
  club_central:
    build:
      context: ./ClubCentral
      dockerfile: Dockerfile
    container_name: club_central
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3012
      - DATABASE_URL=postgresql://fanz_user:${POSTGRES_PASSWORD:-fanz_secure_password}@postgres:5432/fanz_unified
      - REDIS_URL=redis://:${REDIS_PASSWORD:-fanz_redis_password}@redis:6379
      - API_GATEWAY_URL=http://api_gateway:8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - logs:/app/logs
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3012/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Migration HQ
  migration_hq:
    build:
      context: ./Migration-HQ
      dockerfile: Dockerfile
    container_name: migration_hq
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3013
      - DATABASE_URL=postgresql://fanz_user:${POSTGRES_PASSWORD:-fanz_secure_password}@postgres:5432/fanz_unified
      - REDIS_URL=redis://:${REDIS_PASSWORD:-fanz_redis_password}@redis:6379
      - API_GATEWAY_URL=http://api_gateway:8080
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - logs:/app/logs
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3013/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FanzOS Core System
  fanz_os:
    build:
      context: ./FanzOSMicroservices
      dockerfile: Dockerfile
    container_name: fanz_os
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3014
      - DATABASE_URL=postgresql://fanz_user:${POSTGRES_PASSWORD:-fanz_secure_password}@postgres:5432/fanz_unified
      - REDIS_URL=redis://:${REDIS_PASSWORD:-fanz_redis_password}@redis:6379
      - API_GATEWAY_URL=http://api_gateway:8080
      - RABBITMQ_URL=amqp://fanz_user:${RABBITMQ_PASSWORD:-fanz_rabbitmq_password}@rabbitmq:5672/fanz
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - logs:/app/logs
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3014/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # üåê FRONTEND
  # ============================================
  
  # Unified Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_GATEWAY_URL=http://localhost:8080
        - REACT_APP_ECOSYSTEM_NAME=FANZ Unified
    container_name: fanz_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    depends_on:
      api_gateway:
        condition: service_healthy
    ports:
      - "3000:80"
    networks:
      - fanz_ecosystem
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # üìä MONITORING & OBSERVABILITY
  # ============================================
  
  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: fanz_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - fanz_ecosystem

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: fanz_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-fanz_grafana_admin}
    volumes:
      - ./monitoring/grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - fanz_ecosystem
    depends_on:
      - prometheus

  # Elasticsearch for Logs
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: fanz_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - ./monitoring/elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - fanz_ecosystem

  # Kibana for Log Analysis
  kibana:
    image: kibana:8.11.0
    container_name: fanz_kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - fanz_ecosystem
    depends_on:
      - elasticsearch

  # ============================================
  # üîÑ LOAD BALANCER & REVERSE PROXY
  # ============================================
  
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: fanz_nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - media_storage:/var/www/media
    ports:
      - "80:80"
      - "443:443"
    networks:
      - fanz_ecosystem
    depends_on:
      - api_gateway
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# üéØ Configuration Notes:
# 
# Environment Variables (create .env file):
# - POSTGRES_PASSWORD=your_secure_postgres_password
# - REDIS_PASSWORD=your_secure_redis_password
# - RABBITMQ_PASSWORD=your_secure_rabbitmq_password
# - JWT_SECRET=your_super_secure_jwt_secret
# - GRAFANA_PASSWORD=your_grafana_admin_password
# - OPENAI_API_KEY=your_openai_api_key
# - CDN_URL=https://cdn.fanz.com
# - BLOCKCHAIN_ENDPOINT=https://your-blockchain-endpoint
# - PAYMENT_PROCESSOR_URL=https://your-payment-processor
# - CORS_ORIGINS=https://fanz.com,https://www.fanz.com
#
# Deployment Commands:
# - Production: docker-compose up -d
# - Development: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
# - Scaling: docker-compose up -d --scale fanz_social=3
# - Logs: docker-compose logs -f [service_name]
# - Health: docker-compose ps