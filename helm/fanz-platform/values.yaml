# FANZ Unified Ecosystem - Production Values
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  
# Deployment Configuration
replicaCount: 3
deploymentStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

# Auto Scaling Configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 50
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

# Blue-Green Deployment
blueGreen:
  enabled: true
  autoPromotion: false
  scaleDownDelaySeconds: 30
  prePromotionAnalysis:
    templates:
    - templateName: success-rate
    args:
    - name: service-name
      value: fanz-api-gateway
  postPromotionAnalysis:
    templates:
    - templateName: success-rate
    args:
    - name: service-name
      value: fanz-api-gateway

# Services Configuration
services:
  # API Gateway
  apiGateway:
    enabled: true
    image:
      repository: fanz/api-gateway
      tag: "1.0.0"
      pullPolicy: IfNotPresent
    ports:
      http: 8080
      https: 8443
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 2
        memory: 4Gi
    
  # Authentication Service
  authService:
    enabled: true
    image:
      repository: fanz/auth-service
      tag: "1.0.0"
      pullPolicy: IfNotPresent
    ports:
      http: 3000
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 1
        memory: 2Gi
        
  # Backend Services
  backend:
    enabled: true
    image:
      repository: fanz/backend
      tag: "1.0.0"
      pullPolicy: IfNotPresent
    ports:
      http: 3001
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 2
        memory: 4Gi
        
  # Frontend
  frontend:
    enabled: true
    image:
      repository: fanz/frontend
      tag: "1.0.0"
      pullPolicy: IfNotPresent
    ports:
      http: 80
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 1Gi

  # AI/ML Intelligence Hub
  intelligenceHub:
    enabled: true
    image:
      repository: fanz/intelligence-hub
      tag: "1.0.0"
      pullPolicy: IfNotPresent
    ports:
      http: 8000
    resources:
      requests:
        cpu: 1
        memory: 2Gi
        nvidia.com/gpu: 1
      limits:
        cpu: 4
        memory: 8Gi
        nvidia.com/gpu: 2

  # Security Service
  securityService:
    enabled: true
    image:
      repository: fanz/security-service
      tag: "1.0.0"
      pullPolicy: IfNotPresent
    ports:
      http: 9000
    resources:
      requests:
        cpu: 300m
        memory: 512Mi
      limits:
        cpu: 1
        memory: 2Gi

  # Finance Service
  financeService:
    enabled: true
    image:
      repository: fanz/finance-service
      tag: "1.0.0"
      pullPolicy: IfNotPresent
    ports:
      http: 7000
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 2
        memory: 4Gi

# Database Configuration
postgresql:
  enabled: true
  auth:
    enablePostgresUser: true
    postgresPassword: ""
    username: fanzuser
    password: ""
    database: fanzdb
  architecture: replication
  primary:
    persistence:
      enabled: true
      storageClass: ""
      size: 100Gi
    resources:
      requests:
        cpu: 1
        memory: 2Gi
      limits:
        cpu: 4
        memory: 8Gi
  readReplicas:
    replicaCount: 2
    persistence:
      enabled: true
      storageClass: ""
      size: 100Gi
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 2
        memory: 4Gi

# Redis Configuration
redis:
  enabled: true
  architecture: replication
  auth:
    enabled: true
    password: ""
  master:
    persistence:
      enabled: true
      storageClass: ""
      size: 20Gi
    resources:
      requests:
        cpu: 250m
        memory: 512Mi
      limits:
        cpu: 1
        memory: 2Gi
  replica:
    replicaCount: 3
    persistence:
      enabled: true
      storageClass: ""
      size: 20Gi
    resources:
      requests:
        cpu: 250m
        memory: 512Mi
      limits:
        cpu: 1
        memory: 2Gi

# Ingress Configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: api.fanz.com
      paths:
        - path: /
          pathType: Prefix
          service: api-gateway
    - host: app.fanz.com
      paths:
        - path: /
          pathType: Prefix
          service: frontend
    - host: auth.fanz.com
      paths:
        - path: /
          pathType: Prefix
          service: auth-service
  tls:
    - secretName: fanz-api-tls
      hosts:
        - api.fanz.com
    - secretName: fanz-app-tls
      hosts:
        - app.fanz.com
    - secretName: fanz-auth-tls
      hosts:
        - auth.fanz.com

# Security Configuration
security:
  networkPolicies:
    enabled: true
  podSecurityPolicy:
    enabled: true
  serviceAccountAnnotations:
    iam.amazonaws.com/role: "fanz-platform-role"

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
  prometheusRule:
    enabled: true

# Backup Configuration
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention: "30d"
  storageClass: ""

# Environment Configuration
env:
  NODE_ENV: production
  LOG_LEVEL: info
  REDIS_URL: redis://redis-master:6379
  DATABASE_URL: postgresql://fanzuser:password@postgresql:5432/fanzdb