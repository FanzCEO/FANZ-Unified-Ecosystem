openapi: 3.1.0
info:
  title: FANZ API Gateway
  version: 0.1.0
  description: |
    Unified REST edges for the FUN ecosystem. GraphQL is also exposed at /graphql.
    This spec covers operational REST endpoints & webhooks used by platforms and back-office.
servers:
  - url: https://api.fanzunlimited.com
    description: Production
  - url: https://stage-api.fanzunlimited.com
    description: Staging
paths:
  /v1/auth/token:
    post:
      summary: Exchange authorization code for access token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code: { type: string }
                code_verifier: { type: string }
                redirect_uri: { type: string, format: uri }
              required: [code, code_verifier, redirect_uri]
      responses:
        "200":
          description: Token response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
  /v1/users/me:
    get:
      summary: Get current user profile & entitlements
      tags: [Users]
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /v1/content:
    post:
      summary: Create new content upload session (pre-signed URLs via Media Hub)
      tags: [Content]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                platform: { type: string, enum: [boyfanz, girlfanz, pupfanz] }
                filename: { type: string }
                mime_type: { type: string }
              required: [platform, filename, mime_type]
      responses:
        "201":
          description: Created; returns upload URL(s) + content ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadSession"
  /v1/orders:
    post:
      summary: Create purchase/subscription/tip order
      tags: [Orders]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrder"
      responses:
        "201":
          description: Order created; next action (3DS) if required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
  /v1/webhooks/finance:
    post:
      summary: Finance webhook sink (payment events)
      tags: [Webhooks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FinanceWebhook"
      responses:
        "204": { description: Accepted }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    TokenResponse:
      type: object
      properties:
        access_token: { type: string }
        id_token: { type: string }
        expires_in: { type: integer }
        token_type: { type: string, enum: ["Bearer"] }
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        username: { type: string }
        roles: { type: array, items: { type: string } }
        entitlements: { type: array, items: { type: string } }
    UploadSession:
      type: object
      properties:
        content_id: { type: string, format: uuid }
        upload_url: { type: string, format: uri }
        fields: { type: object, additionalProperties: true }
    CreateOrder:
      type: object
      properties:
        kind: { type: string, enum: [subscription, ppv, tip] }
        amount: { type: integer, description: "Amount in cents" }
        currency: { type: string, example: USD }
        creator_id: { type: string, format: uuid }
        content_id: { type: string, format: uuid }
      required: [kind, amount, currency]
    Order:
      type: object
      properties:
        id: { type: string, format: uuid }
        status: { type: string, enum: [requires_action, authorized, settled, failed] }
        client_secret: { type: string, nullable: true }
    FinanceWebhook:
      type: object
      properties:
        type: { type: string, enum: [payment_settled, payment_failed, payout_sent, payout_on_hold] }
        data: { type: object, additionalProperties: true }
