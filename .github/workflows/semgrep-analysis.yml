name: "🔍 Semgrep SAST Security Analysis"

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run Semgrep analysis daily at 7:00 AM UTC (1 hour after CodeQL)
    - cron: '0 7 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  semgrep-scan:
    name: 🔍 Semgrep Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      security-events: write
      actions: read
      contents: read
      checks: write

    steps:
    - name: 🔐 Harden GitHub Actions Runner
      uses: step-security/harden-runner@v2
      with:
        egress-policy: audit
        disable-telemetry: false

    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ Set FANZ security context
      run: |
        echo "FANZ_SEMGREP_SCAN=true" >> $GITHUB_ENV
        echo "SCAN_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
        echo "REPOSITORY_NAME=${{ github.repository }}" >> $GITHUB_ENV

    - name: 🔍 Analyze FANZ service types
      id: analyze
      run: |
        echo "Analyzing FANZ services for specialized security rules..."
        
        # Payment service detection
        if [ -d "payments" ] || [ -d "fanzfinance-os" ] || grep -r "payment\|stripe\|paypal\|transaction" . --include="*.ts" --include="*.js" >/dev/null 2>&1; then
          echo "has_payments=true" >> $GITHUB_OUTPUT
          echo "💳 Payment processing detected - PCI DSS rules enabled"
        fi
        
        # Authentication service detection
        if [ -d "auth-service" ] || grep -r "jwt\|oauth\|passport\|auth" . --include="*.ts" --include="*.js" >/dev/null 2>&1; then
          echo "has_auth=true" >> $GITHUB_OUTPUT
          echo "🔐 Authentication service detected - Enhanced auth rules enabled"
        fi
        
        # API service detection
        if [ -d "api-gateway" ] || [ -d "backend" ] || grep -r "express\|fastify\|koa\|api" . --include="*.ts" --include="*.js" >/dev/null 2>&1; then
          echo "has_api=true" >> $GITHUB_OUTPUT
          echo "🌐 API service detected - API security rules enabled"
        fi
        
        # Frontend/Client detection
        if [ -d "frontend" ] || [ -d "mobile" ] || grep -r "react\|vue\|angular" . --include="*.ts" --include="*.js" >/dev/null 2>&1; then
          echo "has_frontend=true" >> $GITHUB_OUTPUT
          echo "🖥️ Frontend detected - Client-side security rules enabled"
        fi
        
        # Adult content platform specific
        if grep -r "adult\|nsfw\|content.*rating\|age.*verify" . --include="*.ts" --include="*.js" >/dev/null 2>&1; then
          echo "has_adult_content=true" >> $GITHUB_OUTPUT
          echo "🔞 Adult content platform detected - Compliance rules enabled"
        fi

    - name: 🛠️ Setup Semgrep
      run: |
        python -m pip install --upgrade pip
        pip install semgrep

    - name: 🔍 Run Semgrep with OWASP Top 10 Rules
      run: |
        echo "Running Semgrep with FANZ-optimized security rules..."
        
        # Create comprehensive rule configuration
        cat > semgrep-config.yml << 'EOF'
        rules:
          # OWASP Top 10 2021 Coverage
          - owasp-top-ten
          - security
          - xss
          - sql-injection
          - command-injection
          - path-traversal
          - crypto
          - jwt
          - secrets
          
          # Language-specific security rules
          - javascript.lang.security
          - typescript.lang.security
          - python.lang.security
          - python.flask.security
          - python.django.security
          
          # Framework-specific rules
          - javascript.express.security
          - javascript.react.security
          - typescript.react.security
          
          # Banking and financial security
          - generic.secrets.gitleaks.generic-api-key
          - generic.secrets.gitleaks.generic-private-key
          
        EOF
        
        # Run Semgrep scan with custom configuration
        semgrep \
          --config=semgrep-config.yml \
          --config=https://semgrep.dev/p/owasp-top-ten \
          --config=https://semgrep.dev/p/security-audit \
          --config=https://semgrep.dev/p/secrets \
          --sarif \
          --output=semgrep-results.sarif \
          --timeout=1800 \
          --max-memory=8192 \
          --verbose \
          .

    - name: 🎯 Run FANZ-specific security rules
      run: |
        echo "Applying FANZ platform-specific security rules..."
        
        # Create custom FANZ security rules
        mkdir -p .semgrep/fanz-rules
        
        # Adult content security rule
        cat > .semgrep/fanz-rules/adult-content-security.yml << 'EOF'
        rules:
          - id: fanz-adult-content-unvalidated-upload
            pattern: |
              $UPLOAD.upload($FILE)
            message: "Adult content uploads must include content validation and age verification"
            languages: [javascript, typescript]
            severity: WARNING
            metadata:
              category: security
              technology: [adult-content]
              cwe: "CWE-434: Unrestricted Upload of File with Dangerous Type"
              owasp: "A05:2021 – Security Misconfiguration"
            
          - id: fanz-age-verification-bypass
            patterns:
              - pattern: |
                  if ($AGE < 18) { ... }
              - pattern-not: |
                  if ($AGE < 18) { 
                    throw new Error(...);
                    ...
                  }
            message: "Age verification must properly reject underage access"
            languages: [javascript, typescript]
            severity: ERROR
            metadata:
              category: security
              technology: [age-verification]
              cwe: "CWE-284: Improper Access Control"
        EOF
        
        # Payment security rules
        cat > .semgrep/fanz-rules/payment-security.yml << 'EOF'
        rules:
          - id: fanz-payment-card-logging
            pattern: |
              console.log($X, ..., $CARD, ...)
            metavariable-regex:
              CARD: .*(card|credit|payment|cvv|pan).*
            message: "Payment card information should never be logged"
            languages: [javascript, typescript]
            severity: ERROR
            metadata:
              category: security
              technology: [payments]
              cwe: "CWE-532: Information Exposure Through Log Files"
              owasp: "A09:2021 – Security Logging and Monitoring Failures"
              
          - id: fanz-stripe-paypal-usage
            patterns:
              - pattern-either:
                  - pattern: |
                      import * as stripe from "stripe"
                  - pattern: |
                      import * as paypal from "paypal"
                  - pattern: |
                      require("stripe")
                  - pattern: |
                      require("paypal")
            message: "FANZ platform should not use Stripe or PayPal - use approved adult-friendly processors"
            languages: [javascript, typescript]
            severity: ERROR
            metadata:
              category: security
              technology: [payments]
              policy: "fanz-payment-processors"
        EOF
        
        # Authentication security rules
        cat > .semgrep/fanz-rules/auth-security.yml << 'EOF'
        rules:
          - id: fanz-weak-jwt-secret
            patterns:
              - pattern: |
                  jwt.sign($PAYLOAD, "$SECRET", ...)
              - metavariable-regex:
                  SECRET: ^(secret|test|dev|password|123456|key)$
            message: "JWT secrets must be cryptographically strong and environment-specific"
            languages: [javascript, typescript]
            severity: ERROR
            metadata:
              category: security
              technology: [jwt]
              cwe: "CWE-798: Use of Hard-coded Credentials"
              
          - id: fanz-session-without-secure
            pattern: |
              app.use(session({
                ...,
                secure: false,
                ...
              }))
            message: "Sessions must use secure flag in production"
            languages: [javascript, typescript]
            severity: WARNING
            metadata:
              category: security
              technology: [sessions]
        EOF
        
        # Run custom FANZ rules
        semgrep \
          --config=.semgrep/fanz-rules/ \
          --sarif \
          --output=fanz-custom-results.sarif \
          --append \
          .

    - name: 🔒 Enhanced security checks for detected services
      run: |
        echo "Running enhanced security checks based on detected services..."
        
        if [ "${{ steps.analyze.outputs.has_payments }}" = "true" ]; then
          echo "🏦 Running PCI DSS compliance checks..."
          semgrep \
            --config=https://semgrep.dev/p/pci-dss \
            --sarif --output=pci-results.sarif \
            ./payments ./fanzfinance-os 2>/dev/null || echo "PCI scan completed with some findings"
        fi
        
        if [ "${{ steps.analyze.outputs.has_auth }}" = "true" ]; then
          echo "🔐 Running authentication security checks..."
          semgrep \
            --config=https://semgrep.dev/p/jwt \
            --config=https://semgrep.dev/p/oauth \
            --sarif --output=auth-results.sarif \
            ./auth-service ./backend 2>/dev/null || echo "Auth scan completed"
        fi
        
        if [ "${{ steps.analyze.outputs.has_api }}" = "true" ]; then
          echo "🌐 Running API security checks..."
          semgrep \
            --config=https://semgrep.dev/p/api-security \
            --sarif --output=api-results.sarif \
            ./api-gateway ./backend 2>/dev/null || echo "API scan completed"
        fi

    - name: 🔄 Merge SARIF results
      run: |
        echo "Merging all SARIF results..."
        
        # Merge all SARIF files
        python3 << 'EOF'
        import json
        import glob
        import os
        
        merged_sarif = {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": []
        }
        
        # Find all SARIF files
        sarif_files = glob.glob("*results.sarif")
        
        for sarif_file in sarif_files:
            try:
                with open(sarif_file, 'r') as f:
                    data = json.load(f)
                    if 'runs' in data:
                        merged_sarif['runs'].extend(data['runs'])
                        print(f"Merged {sarif_file}")
            except Exception as e:
                print(f"Error merging {sarif_file}: {e}")
        
        # Add FANZ metadata
        for run in merged_sarif['runs']:
            if 'properties' not in run:
                run['properties'] = {}
            
            run['properties'].update({
                'fanz:scan-type': 'semgrep-sast',
                'fanz:scan-timestamp': os.environ.get('SCAN_TIMESTAMP', ''),
                'fanz:repository': os.environ.get('REPOSITORY_NAME', ''),
                'fanz:compliance-required': True,
                'fanz:adult-content-platform': True
            })
        
        # Write merged results
        with open('semgrep-merged.sarif', 'w') as f:
            json.dump(merged_sarif, f, indent=2)
        
        print(f"Merged {len(sarif_files)} SARIF files into semgrep-merged.sarif")
        EOF

    - name: 📤 Upload SARIF to GitHub Security
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep-merged.sarif
        category: semgrep

    - name: 📊 Generate Semgrep security summary
      if: always()
      run: |
        echo "## 🔍 FANZ Semgrep Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Scan Time**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Security Rule Coverage:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ OWASP Top 10 2021" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ General Security Rules" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Secrets Detection" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Injection Vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Cryptographic Issues" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.analyze.outputs.has_payments }}" = "true" ]; then
          echo "💳 **Payment Security**: PCI DSS compliance rules applied" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.analyze.outputs.has_auth }}" = "true" ]; then
          echo "🔐 **Authentication Security**: JWT/OAuth vulnerability detection enabled" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.analyze.outputs.has_api }}" = "true" ]; then
          echo "🌐 **API Security**: REST API vulnerability scanning enabled" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.analyze.outputs.has_adult_content }}" = "true" ]; then
          echo "🔞 **Adult Content Compliance**: Age verification and content security rules applied" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚨 FANZ-Specific Security Checks:" >> $GITHUB_STEP_SUMMARY
        echo "- 🚫 Stripe/PayPal usage detection (policy violation)" >> $GITHUB_STEP_SUMMARY
        echo "- 🔞 Adult content upload validation" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 Age verification bypass prevention" >> $GITHUB_STEP_SUMMARY
        echo "- 💳 Payment card information logging detection" >> $GITHUB_STEP_SUMMARY
        echo "- 🔑 Weak JWT secret detection" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📈 **View Results:** Security tab → Code scanning alerts (Semgrep category)" >> $GITHUB_STEP_SUMMARY

    - name: 📤 Upload artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: semgrep-sarif-results-${{ github.run_number }}
        path: |
          *results.sarif
          semgrep-merged.sarif
        retention-days: 30

    - name: 🚨 Security alert for critical findings
      if: failure()
      run: |
        echo "::error title=Semgrep Analysis Issues::Semgrep analysis encountered issues. Review logs and ensure all custom security rules are properly configured."
        echo "This may indicate security policy violations or critical vulnerabilities requiring immediate attention."

  # Combined security status check
  security-status:
    name: 📊 FANZ Security Status
    needs: [semgrep-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 🎯 Final security assessment
      run: |
        echo "## 🛡️ FANZ Multi-Layer Security Analysis Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Both CodeQL and Semgrep analyses have completed for comprehensive security coverage." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Security Analysis Layers:" >> $GITHUB_STEP_SUMMARY
        echo "1. **CodeQL**: Deep semantic analysis for complex vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "2. **Semgrep**: Fast pattern-based detection for known security issues" >> $GITHUB_STEP_SUMMARY
        echo "3. **FANZ Custom Rules**: Adult content platform specific security checks" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Compliance Coverage:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ OWASP Top 10 2021" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ PCI DSS (Payment Processing)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Adult Content Compliance (2257)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Authentication Security (JWT/OAuth)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ API Security Standards" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎯 **Next Actions:**" >> $GITHUB_STEP_SUMMARY
        echo "1. Review all findings in Security → Code scanning alerts" >> $GITHUB_STEP_SUMMARY
        echo "2. Prioritize Critical/High severity issues (24-72h SLA)" >> $GITHUB_STEP_SUMMARY
        echo "3. Address FANZ policy violations immediately" >> $GITHUB_STEP_SUMMARY
        echo "4. Update FanzDash security dashboard" >> $GITHUB_STEP_SUMMARY