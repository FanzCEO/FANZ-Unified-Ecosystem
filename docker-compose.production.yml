version: '3.8'

# FANZ Ecosystem - Production Deployment Configuration
# Optimized for high-availability, security, and performance

services:
  # Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: fanz-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      - api-gateway
      - frontend
    networks:
      - fanz-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fanz.rule=Host(`fanz.com`,`www.fanz.com`)"
      - "traefik.http.routers.fanz.tls.certresolver=letsencrypt"

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile.production
    container_name: fanz-api-gateway
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_ENABLED=true
      - CORS_ORIGIN=${CORS_ORIGINS}
    ports:
      - "3000:3000"
    depends_on:
      - database
      - redis
      - auth-service
    networks:
      - fanz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Authentication Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile.production
    container_name: fanz-auth
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - BCRYPT_ROUNDS=12
    depends_on:
      - database
      - redis
    networks:
      - fanz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Services
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: fanz-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      # Adult-Friendly Payment Processors
      - CCBILL_CLIENT_ACCNUM=${CCBILL_CLIENT_ACCNUM}
      - CCBILL_CLIENT_SUBACC=${CCBILL_CLIENT_SUBACC}
      - CCBILL_FLEX_ID=${CCBILL_FLEX_ID}
      - CCBILL_SALT=${CCBILL_SALT}
      - CCBILL_ENVIRONMENT=production
      - PAXUM_API_KEY=${PAXUM_API_KEY}
      - PAXUM_API_SECRET=${PAXUM_API_SECRET}
      - PAXUM_COMPANY_ID=${PAXUM_COMPANY_ID}
      - PAXUM_ENVIRONMENT=production
      - SEGPAY_PACKAGE_ID=${SEGPAY_PACKAGE_ID}
      - SEGPAY_BILLERID=${SEGPAY_BILLERID}
      - SEGPAY_USERNAME=${SEGPAY_USERNAME}
      - SEGPAY_PASSWORD=${SEGPAY_PASSWORD}
      - SEGPAY_ENVIRONMENT=production
      # Monitoring & Compliance
      - MONITORING_ENABLED=true
      - AGE_VERIFICATION_REQUIRED=true
      - MINIMUM_AGE=18
      # AI Services
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # Media Storage
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - CLOUDFRONT_DOMAIN=${CLOUDFRONT_DOMAIN}
    depends_on:
      - database
      - redis
    networks:
      - fanz-network
    volumes:
      - backend-uploads:/app/uploads
      - backend-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        - REACT_APP_API_URL=${API_GATEWAY_URL}
        - REACT_APP_CDN_URL=${CDN_URL}
        - REACT_APP_ENVIRONMENT=production
    container_name: fanz-frontend
    restart: unless-stopped
    networks:
      - fanz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Platform Clusters
  platform-clusters:
    build:
      context: ./platform-clusters
      dockerfile: Dockerfile.production
    container_name: fanz-platforms
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - api-gateway
      - database
    networks:
      - fanz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database
  database:
    image: postgres:15-alpine
    container_name: fanz-database
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-fanz_unified}
      - POSTGRES_USER=${POSTGRES_USER:-fanz_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS="--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - postgres-backups:/backups
    networks:
      - fanz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fanz_user} -d ${POSTGRES_DB:-fanz_unified}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: fanz-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - fanz-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message Queue (for background jobs)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: fanz-rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-fanz_admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=fanz
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - fanz-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: fanz-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - fanz-network

  grafana:
    image: grafana/grafana:latest
    container_name: fanz-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - fanz-network

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: fanz-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - fanz-network

  promtail:
    image: grafana/promtail:latest
    container_name: fanz-promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - backend-logs:/app/logs:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - fanz-network

  # Security Scanner
  owasp-zap:
    image: owasp/zap2docker-stable
    container_name: fanz-security-scan
    restart: "no"
    profiles:
      - security
    command: zap-baseline.py -t https://fanz.com -J report.json
    volumes:
      - ./security/reports:/zap/wrk:rw
    networks:
      - fanz-network

  # Backup Service
  backup-service:
    build:
      context: ./scripts/backup
      dockerfile: Dockerfile
    container_name: fanz-backup
    restart: unless-stopped
    environment:
      - POSTGRES_HOST=database
      - POSTGRES_DB=${POSTGRES_DB:-fanz_unified}
      - POSTGRES_USER=${POSTGRES_USER:-fanz_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BACKUP_BUCKET=${S3_BACKUP_BUCKET}
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
    volumes:
      - postgres-backups:/backups
    depends_on:
      - database
    networks:
      - fanz-network

networks:
  fanz-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Database & Cache
  postgres-data:
    driver: local
  postgres-backups:
    driver: local
  redis-data:
    driver: local
  rabbitmq-data:
    driver: local
  
  # Application Data
  backend-uploads:
    driver: local
  backend-logs:
    driver: local
  nginx-cache:
    driver: local
  
  # Monitoring Data
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local

# Production deployment labels for container orchestration
labels:
  - "com.fanz.ecosystem=production"
  - "com.fanz.version=${FANZ_VERSION:-latest}"
  - "com.fanz.build=${BUILD_NUMBER:-manual}"