version: '3.8'

services:
  # FanzFinance OS API
  fanz-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: fanz-finance-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - API_VERSION=1.0.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=fanz_finance
      - DB_USER=fanz_user
      - DB_PASSWORD=secure_password_2024!
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_super_secure_jwt_secret_key_2024
      - REFRESH_TOKEN_SECRET=your_refresh_token_secret_key_2024
      - CORS_ORIGIN=http://localhost:3001,http://localhost:3000
      - ENABLE_WEBSOCKETS=true
      - ENABLE_METRICS=true
      - LOG_LEVEL=info
      - MAX_REQUEST_SIZE=10mb
      - RATE_LIMIT_WINDOW=15
      - RATE_LIMIT_MAX_REQUESTS=1000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/usr/src/app/logs
    networks:
      - fanz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fanz-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=fanz_finance
      - POSTGRES_USER=fanz_user
      - POSTGRES_PASSWORD=secure_password_2024!
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - fanz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fanz_user -d fanz_finance"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: fanz-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password_2024!
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - fanz-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password_2024!", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

  # Database Migrations
  migrations:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: fanz-migrations
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=fanz_finance
      - DB_USER=fanz_user
      - DB_PASSWORD=secure_password_2024!
    depends_on:
      postgres:
        condition: service_healthy
    command: npm run db:migrate
    networks:
      - fanz-network
    profiles:
      - migration

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: fanz-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - fanz-api
    networks:
      - fanz-network
    profiles:
      - proxy

  # Monitoring - Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: fanz-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - fanz-network
    profiles:
      - monitoring

  # Monitoring - Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: fanz-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password_2024!
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - fanz-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  fanz-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16