# ðŸš€ FANZ Unified Ecosystem - Kubernetes Production Deployment
apiVersion: v1
kind: Namespace
metadata:
  name: fanz-backend
  labels:
    name: fanz-backend
    environment: production
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: fanz-backend-config
  namespace: fanz-backend
data:
  NODE_ENV: "production"
  PORT: "3000"
  LOG_LEVEL: "info"
  CORS_ORIGIN: "https://fanz.network"
  RATE_LIMIT_WINDOW_MS: "900000"
  RATE_LIMIT_MAX_REQUESTS: "100"
  GEO_ROUTING_ENABLED: "true"
  DEFAULT_PROCESSOR: "mock"
  METRICS_ENABLED: "true"
  HEALTH_CHECK_TIMEOUT: "5000"
---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: fanz-backend-secrets
  namespace: fanz-backend
type: Opaque
data:
  # IMPORTANT: Replace these placeholder values with actual base64-encoded secrets
  # Use: echo -n "your-secret-value" | base64
  DATABASE_URL: {{BASE64_ENCODED_DATABASE_URL}} # Replace with actual base64 encoded value
  REDIS_URL: {{BASE64_ENCODED_REDIS_URL}} # Replace with actual base64 encoded value  
  JWT_SECRET: {{BASE64_ENCODED_JWT_SECRET}} # Replace with actual base64 encoded value
  ENCRYPTION_KEY: {{BASE64_ENCODED_ENCRYPTION_KEY}} # Replace with actual base64 encoded value
  WEBHOOK_SECRET: {{BASE64_ENCODED_WEBHOOK_SECRET}} # Replace with actual base64 encoded value
---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fanz-backend
  namespace: fanz-backend
automountServiceAccountToken: false
---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fanz-backend
  namespace: fanz-backend
  labels:
    app: fanz-backend
    version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: fanz-backend
  template:
    metadata:
      labels:
        app: fanz-backend
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: fanz-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: fanz-backend
        image: fanz/backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        envFrom:
        - configMapRef:
            name: fanz-backend-config
        - secretRef:
            name: fanz-backend-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 12
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65532
          runAsGroup: 65532
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: logs
        emptyDir:
          sizeLimit: 500Mi
      terminationGracePeriodSeconds: 30
      restartPolicy: Always
      dnsPolicy: ClusterFirst
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: fanz-backend-service
  namespace: fanz-backend
  labels:
    app: fanz-backend
spec:
  selector:
    app: fanz-backend
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  type: ClusterIP
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fanz-backend-hpa
  namespace: fanz-backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fanz-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fanz-backend-pdb
  namespace: fanz-backend
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: fanz-backend
---
# Network Policy (Optional - requires CNI support)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fanz-backend-netpol
  namespace: fanz-backend
spec:
  podSelector:
    matchLabels:
      app: fanz-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 53    # DNS
    - protocol: UDP
      port: 53    # DNS
  - to: []
    ports:
    - protocol: TCP
      port: 443   # HTTPS
    - protocol: TCP
      port: 80    # HTTP
---
# Ingress (requires ingress controller)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fanz-backend-ingress
  namespace: fanz-backend
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
spec:
  tls:
  - hosts:
    - api.fanz.network
    secretName: fanz-backend-tls
  rules:
  - host: api.fanz.network
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fanz-backend-service
            port:
              number: 80
---
# ServiceMonitor for Prometheus monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: fanz-backend-monitor
  namespace: fanz-backend
  labels:
    app: fanz-backend
spec:
  selector:
    matchLabels:
      app: fanz-backend
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s