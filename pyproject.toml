[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "fanz-unified-ecosystem"
version = "1.0.0"
description = "The ultimate FANZ creator economy platform with 100+ microservices and 9 platform clusters"
authors = ["FANZ Development Team <dev@fanz.network>"]
readme = "README.md"
packages = [{include = "fanz", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"

# ü§ñ AI and Machine Learning
openai = "^1.102.0"
transformers = "^4.46.3"
torch = "^2.5.1"
scikit-learn = "^1.6.0"
numpy = "^2.2.1"
pandas = "^2.2.3"
pillow = "^11.0.0"

# üåê Web Framework and API
fastapi = "^0.115.6"
uvicorn = "^0.32.1"
gunicorn = "^23.0.0"
pydantic = "^2.10.3"
httpx = "^0.28.1"
requests = "^2.32.5"

# üíæ Database and Storage
sqlalchemy = "^2.0.43"
alembic = "^1.14.0"
asyncpg = "^0.30.0"
redis = "^5.2.1"
pymongo = "^4.10.1"

# üîê Security and Authentication
python-jose = {extras = ["cryptography"], version = "^3.5.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.20"

# üìä Data Processing and Analytics
celery = "^5.5.3"
pytz = "^2025.2"
python-dateutil = "^2.9.0.post0"
icalendar = "^6.3.1"
trafilatura = "^2.0.0"

# üì® Communication and Notifications
twilio = "^9.7.2"
sendgrid = "^6.12.4"

# üß™ Testing and Quality
pytest = "^8.3.4"
pytest-asyncio = "^0.25.0"
pytest-cov = "^6.0.0"
black = "^24.12.0"
ruff = "^0.8.4"
mypy = "^1.14.0"

# üìã Utilities
python-dotenv = "^1.0.1"
click = "^8.1.8"
rich = "^13.9.4"
pydantic-settings = "^2.7.0"

[tool.poetry.group.dev.dependencies]
# Development tools
pre-commit = "^4.0.1"
pytest-xdist = "^3.6.0"
pytest-mock = "^3.14.0"
factory-boy = "^3.3.1"

# Code quality
bandit = "^1.8.0"
safety = "^3.2.11"
vulture = "^2.13"

# Documentation
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.44"

[tool.poetry.group.ai.dependencies]
# Advanced AI and ML
anthropic = "^0.40.0"
langchain = "^0.3.9"
langchain-openai = "^0.2.10"
chromadb = "^0.5.23"
sentence-transformers = "^3.3.1"

[tool.poetry.group.finance.dependencies]
# FanzFinance OS specific dependencies
decimal = "^1.70"
python-accounting = "^0.4.2"
forex-python = "^1.8"

# CreatorCRM and specialized systems workspace
[tool.poetry.group.crm]
optional = true

[tool.poetry.group.crm.dependencies]
# CRM-specific dependencies
salesforce-bulk = "^2.2.0"
hubspot-api-client = "^10.1.1"
mailchimp3 = "^3.0.21"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["fanz"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
    "specialized-systems/creator-crm/tests",
    "fanzfinance-os/tests",
    "ai/tests"
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]

[tool.coverage.run]
source = ["src", "specialized-systems", "fanzfinance-os", "ai"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]